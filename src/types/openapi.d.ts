/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/healthcheck": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Healthcheck route */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Healthcheck successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a user by query params */
    get: {
      parameters: {
        query?: {
          /** @description Email of user */
          email?: string;
          /** @description First name of user */
          firstName?: string;
          /** @description Last name of user */
          lastName?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Users matching the query parameters */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["User"][];
          };
        };
        /** @description Bad request (e.g., invalid team ID) */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Create a new user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserCreate"];
        };
      };
      responses: {
        /** @description User created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Bad request (e.g., invalid team ID) */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userID}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a user by id */
    get: operations["GetUsersUserID"];
    put?: never;
    post?: never;
    /** Delete a user by id */
    delete: operations["DeleteUsersUserID"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a team by query params */
    get: {
      parameters: {
        query?: {
          /** @description Team name */
          name?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Teams matching the query parameters */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Team"][];
          };
        };
        /** @description Bad request (e.g., invalid team name) */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Create a new team */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["TeamCreate"];
        };
      };
      responses: {
        /** @description Team created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Team"];
          };
        };
        /** @description Bad request (e.g., invalid team name) */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{teamID}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a team by id */
    get: operations["GetTeamsTeamID"];
    put?: never;
    post?: never;
    /** Delete a team by id */
    delete: operations["DeleteTeamsTeamID"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{teamID}/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all members of a team */
    get: operations["GetTeamsTeamIDUsers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{teamID}/users/{userID}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Add a user to a team */
    post: operations["PostTeamsTeamIDUsersUserID"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    UserCreate: {
      /** Format: email */
      email: string;
      firstName: string;
      lastName: string;
    };
    User: {
      id: number;
      /** Format: email */
      email: string;
      firstName: string;
      lastName: string;
    };
    TeamCreate: {
      name: string;
    };
    Team: {
      id: number;
      name: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  GetUsersUserID: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Numeric ID of the user to get */
        userID: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Got user successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Bad request (e.g., invalid team ID) */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  DeleteUsersUserID: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Numeric ID of the user to delete */
        userID: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted user successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      /** @description Bad request (e.g., invalid user ID) */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  GetTeamsTeamID: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Numeric ID of the team to get */
        teamID: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Got team successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Something went wrong internally */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  DeleteTeamsTeamID: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Numeric ID of the team to delete */
        teamID: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted team successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      /** @description Bad request (e.g., invalid team id) */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  GetTeamsTeamIDUsers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the team */
        teamID: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Users successfully found */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /** @description Bad request, team id is invalid */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      /** @description Something went wrong */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  PostTeamsTeamIDUsersUserID: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the user */
        userID: number;
        /** @description ID of the team */
        teamID: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User successfully added to the team */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User or team not found */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
